load ros_primitive .
load ros_msgType .




fth MSG is
    pr ROSMAUDE#MSGTYPE .
    sort Elt .
    op rosType : -> MsgType .
endfth


omod ROS2-BASE is
    pr CONVERSION .
    pr ROSMAUDE#MSGTYPE .
    pr ROSMAUDE#PRIMITIVE .
    sort ServiceType .
    sort Data .
    sort ROS2Oid .
    sort Ros2Msg .
    sort PublisherOid SubscriptionOid .
    sort MsgTypeSign .
    subsort Ros2Msg < Msg .
    subsort ROS2Oid PublisherOid SubscriptionOid < Oid .
    op publisher : Nat MsgTypeSign -> PublisherOid .
    op subscription : Nat MsgTypeSign -> SubscriptionOid .
    op ROS2 : -> ROS2Oid .
    op typecheck : MsgTypeSign Data -> Bool .
    op rosType : MsgTypeSign -> MsgType .

    msg createPublisher : ROS2Oid Oid MsgTypeSign String Int -> Ros2Msg
    [ctor special (
            id-hook SpecialHubSymbol (roshook)
            op-hook publisher (publisher : Nat MsgTypeSign ~> PublisherOid)
            op-hook createdPublisher (createdPublisher : Oid ROS2Oid PublisherOid ~> Msg)
            op-hook rosType (rosType : MsgTypeSign ~> MsgType)
    )] .
    
    msg createdPublisher : Oid ROS2Oid PublisherOid -> Ros2Msg .
    msg publish : PublisherOid Oid Data -> Ros2Msg
    [ctor special (
            id-hook SpecialHubSymbol (roshook)
            op-hook published (published : Oid PublisherOid ~> Msg)
            term-hook true (true)
    )].
    msg published : Oid PublisherOid ->  Ros2Msg .
    msg createSubscription : ROS2Oid Oid MsgTypeSign String Int -> Ros2Msg
    [ctor special (
            id-hook SpecialHubSymbol (roshook)
            op-hook subscription (subscription : Nat MsgTypeSign ~> SubscriptionOid)
            op-hook createdSubscription (createdSubscription : Oid Oid SubscriptionOid ~> Msg)
            op-hook rosType (rosType : MsgTypeSign ~> MsgType)
    )].
    msg createdSubscription : Oid ROS2Oid SubscriptionOid -> Ros2Msg .
    msg recieve : SubscriptionOid Oid -> Ros2Msg
    [ctor special (
            id-hook SpecialHubSymbol (roshook)
            op-hook recieved (recieved : Oid SubscriptionOid Data ~> Msg)
            op-hook ptr (<obj at _> : Int ~> PyObject)
    )].
    msg recieved : Oid SubscriptionOid Data -> Ros2Msg .
    msg ros2Error : Ros2Msg -> Ros2Msg .
    eq typecheck(T:MsgTypeSign,D:Data) = false [owise] .
endom

omod MESSAGE{X :: MSG} is
    ex ROS2-BASE .
    sort MsgType{X} .
    sort PublisherOid{X} SubscriptionOid{X} .
    sort Data{X} .
    subsort MsgType{X} < MsgTypeSign .
    subsort PublisherOid{X} < PublisherOid .
    subsort SubscriptionOid{X} < SubscriptionOid .
    subsort Data{X} < Data .
    subsort X$Elt < Data{X} .
    --- op [_] : X$Elt -> Data{X} .

    op type : -> MsgType{X} .
    op rosType : MsgType{X} -> MsgType .
    eq rosType(mt:MsgType{X}) = rosType .

    op publisher : Nat MsgType{X} -> PublisherOid{X} .
    op subscription : Nat MsgType{X} -> SubscriptionOid{X} .

    --- msg createPublisher : ROS2Oid Oid MsgType{X} String Int -> Ros2Msg
    --- [ctor special (
    ---         id-hook SpecialHubSymbol (roshook)
    ---         op-hook publisher (publisher : Nat MsgType{X} ~> PublisherOid{X})
    ---         op-hook createdPublisher (createdPublisher : Oid ROS2Oid PublisherOid{X} ~> Msg)
    --- )].
    --- msg createdPublisher : Oid ROS2Oid PublisherOid{X} -> Ros2Msg .
    --- msg publish : PublisherOid{X} Oid Data{X} -> Ros2Msg
    --- [ctor special (
    ---         id-hook SpecialHubSymbol (roshook)
    ---         op-hook published (published : Oid PublisherOid{X} ~> Msg)
    --- )].
    --- msg published : Oid PublisherOid{X} ->  Ros2Msg .

    --- msg createSubscription : ROS2Oid Oid MsgType{X} String Int -> Ros2Msg
    --- [ctor special (
    ---         id-hook SpecialHubSymbol (roshook)
    ---         op-hook subscription (subscription : Nat MsgType{X} ~> SubscriptionOid{X})
    ---         op-hook createdSubscription (createdSubscription : Oid Oid SubscriptionOid{X} ~> Msg)
    --- )].
    --- msg createdSubscription : Oid ROS2Oid SubscriptionOid{X} -> Ros2Msg .
    --- msg recieve : SubscriptionOid{X} Oid -> Ros2Msg
    --- [ctor special (
    ---         id-hook SpecialHubSymbol (roshook)
    ---         op-hook recieved (recieved : Oid SubscriptionOid{X} Data{X} ~> Msg)
    --- )].
    --- msg recieved : Oid SubscriptionOid{X} Data{X} -> Ros2Msg .

    eq typecheck(t:MsgType{X},x:Data{X}) = true .
endom





--- view STRINGMSG{X :: STRINGMSG} from MSG to X is endv































