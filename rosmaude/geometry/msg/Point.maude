sload ros_base .

fth ROSMAUDE#MSG#INTERFACE#GEOMETRY#POINT is
    pr ROSMAUDE#PRIMITIVE .
    sort Elt .
    op x:_,y:_,z:_ : ros#float64 ros#float64 ros#float64 -> Elt .
    op x : Elt -> ros#float64 .
    op y : Elt -> ros#float64 .
    op z : Elt -> ros#float64 .
endfth

fmod ROSMAUDE#MSG#GEOMETRY#POINT#BASE{X :: ROSMAUDE#MSG#INTERFACE#GEOMETRY#POINT} is
    pr STRING .
    pr RAW .
    op upRaw : X$Elt -> Raw .
    op downRaw : Raw -> X$Elt .
    var R : Raw .
    var E : X$Elt .
    var vx : ros#float64 .
    var vy : ros#float64 .
    var vz : ros#float64 .
    eq upRaw(E) = (
        "x" |-> x(E),
        "y" |-> y(E),
        "z" |-> z(E)
        ) .
    ceq downRaw(R) = x: vx,y: vy,z: vz 
    if true
    /\ vx := R["x"] 
    /\ vy := R["y"]
    /\ vz := R["z"] 
    .
endfm

view ROSMAUDE#MSG#GEOMETRY#POINT#TOP from MSG to ROSMAUDE#MSG#BODY is
    op rosType to term "geometry/msg/Point" .
endv

view ROSMAUDE#MSG#GEOMETRY#POINT#CUSTOM{X :: ROSMAUDE#MSG#INTERFACE#GEOMETRY#POINT} from ROSMAUDE#MSG#BODY to ROSMAUDE#MSG#GEOMETRY#POINT#BASE{X} is 
    sort Elt to X$Elt .
endv

omod ROSMAUDE#MSG#GEOMETRY#POINT#CUSTOM{X :: ROSMAUDE#MSG#INTERFACE#GEOMETRY#POINT} is
    pr MESSAGE{ROSMAUDE#MSG#GEOMETRY#POINT#TOP}{ROSMAUDE#MSG#GEOMETRY#POINT#CUSTOM{X}} .
endom

--- default support
fmod ROSMAUDE#MSG#GEOMETRY#POINT#DEFAULT is
    pr ROSMAUDE#PRIMITIVE .
    sort Elt .
    op x:_,y:_,z:_ : ros#float64 ros#float64 ros#float64 -> Elt .
    op x : Elt -> ros#float64 .
    op y : Elt -> ros#float64 .
    op z : Elt -> ros#float64 .
    var x : ros#float64 .
    var y : ros#float64 .
    var z : ros#float64 .
    eq x(x: x,y: y,z: z) = x .
    eq y(x: x,y: y,z: z) = y .
    eq z(x: x,y: y,z: z) = z .
endfm
view ROSMAUDE#MSG#GEOMETRY#POINT#DEFAULT from ROSMAUDE#MSG#INTERFACE#GEOMETRY#POINT to ROSMAUDE#MSG#GEOMETRY#POINT#DEFAULT is
endv

omod ROSMAUDE#MSG#GEOMETRY#POINT is
    pr ROSMAUDE#MSG#GEOMETRY#POINT#CUSTOM{ROSMAUDE#MSG#GEOMETRY#POINT#DEFAULT} .
endom



