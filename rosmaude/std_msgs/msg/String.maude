sload ros_base .

fth ROSMAUDE#MSG#INTERFACE#STRING is
    pr ROSMAUDE#STRING .
    sort Elt .
    op data : Elt -> ros#string .
    op set-data : Elt ros#string -> Elt .
    op default : -> Elt .
endfth

fmod ROSMAUDE#MSG#STRING#BASE{X :: ROSMAUDE#MSG#INTERFACE#STRING} is
    pr STRING .
    pr RAW .
    op upRaw : X$Elt -> Raw .
    eq upRaw(e:X$Elt) = ("data" |-> data(e:X$Elt)) .
    op downRaw : Raw -> X$Elt .
    eq downRaw(r:Raw) = set-data(default,r:Raw["data"]) .
endfm

view ROSMAUDE#MSG#STRING#TOP from MSG to ROSMAUDE#MSG#BODY is
    op rosType to term "std_msgs/msg/String" .
endv

view ROSMAUDE#MSG#STRING#CUSTOM{X :: ROSMAUDE#MSG#INTERFACE#STRING} from ROSMAUDE#MSG#BODY to ROSMAUDE#MSG#STRING#BASE{X} is 
    sort Elt to X$Elt .
endv

view ROSMAUDE#MSG#STRING#String from ROSMAUDE#MSG#INTERFACE#STRING to ROSMAUDE#STRING is
    sort Elt to String .
    op data(e:Elt) to term ros#string(e:String) .
    op set-data(e:Elt,s:ros#string) to term get(s:ros#string) .
    op default to term "" .
endv

omod ROSMAUDE#MSG#STRING#RAW is
    pr MESSAGE{ROSMAUDE#MSG#STRING#TOP}{Raw} .
endom

omod ROSMAUDE#MSG#STRING{X :: ROSMAUDE#MSG#INTERFACE#STRING} is
    pr MESSAGE{ROSMAUDE#MSG#STRING#TOP}{ROSMAUDE#MSG#STRING#CUSTOM{X}} .
endom

omod ROSMAUDE#MSG#STRING#STRING is
    pr ROSMAUDE#MSG#STRING{ROSMAUDE#MSG#STRING#String} .
endom


