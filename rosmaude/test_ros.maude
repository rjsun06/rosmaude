load ros .
load std_msgs/msg/String .
load std_msgs/msg/Header .
--- load builtin_interfaces/msg/Time .

omod test1 is
    pr ROS2 .
    pr ROSMAUDE#MSG#STRING * (op type to str) .
    pr STRING .
    pr LIST{String} * (op nil to noString) .

    class Talker | publisher : [Oid], words : List{String} .
    class Listener | subscription : [Oid], got : List{String} .

    op na : -> [Oid] .

    ops t a1 a2 : -> Oid .
    op init : -> Configuration .

    eq init = 
        < t : Talker | publisher : na, words : noString "HI" "Im T" "Hello World" "<DONE>" >
        < a1 : Listener | subscription : na, got : noString >
        < a2 : Listener | subscription : na, got : noString >
        createPublisher(ROS2,t,str,"/speech",3)
        createSubscription(ROS2,a1,str, "/speech",5)
        createSubscription(ROS2,a2,str, "/speech",5)
    .

    var ME NEW O FROM : Oid .
    var WORDS : List{String} .
    var STR : String .

    rl [initTalker] :
        < ME : Talker | publisher : na, words : STR WORDS >
        createdPublisher(ME, ROS2, any:String, NEW)
    =>
        < ME : Talker | publisher : NEW, words : WORDS >
        publish(NEW,ME,[STR])
    .

    rl [initListener] :
        < ME : Listener | subscription : na >
        createdSubscription(ME, ROS2, NEW)
    =>
        < ME : Listener | subscription : NEW >
        recieve(NEW, ME)
    .    

    rl [talk] :
        < ME : Talker | publisher : O, words : STR WORDS >
        published(ME,O)
    =>
        < ME : Talker | publisher : O, words : WORDS >
        publish(O,ME,[STR])
    .

    rl [talk] :
        < ME : Talker | publisher : O, words : noString >
        published(ME,O)
    =>
        < ME : Talker | publisher : O, words : noString >
    .

    rl [listen] :
        < ME : Listener | got : WORDS >
        recieved(ME, FROM, [STR])
    =>
        if STR == "<DONE>" then
            < ME : Listener | got : WORDS >
        else
            < ME : Listener | got : WORDS STR >
            recieve(FROM, ME)
        fi
    .    
endom


omod test2 is
    pr ROS2 .
    pr INT .
    pr LIST{Int} * (op nil to noInt) .
    pr ROSMAUDE#MSG#HEADER * (op type to header, sort Elt to Header) .
    class Talker | publisher : [Oid], words : List{Int} .
    class Listener | subscription : [Oid], got : List{Int} .

    op na : -> [Oid] .

    ops t2 a21 a22 : -> Oid .
    op init : -> Configuration .

    eq init = 
        < t2 : Talker | publisher : na, words : noInt 9 4 7 0 >
        < a21 : Listener | subscription : na, got : noInt >
        < a22 : Listener | subscription : na, got : noInt >
        createPublisher(ROS2,t2,header,"/speech2",3)
        createSubscription(ROS2,a21,header, "/speech2",5)
        createSubscription(ROS2,a22,header, "/speech2",5)
    .

    var ME NEW O FROM : Oid .
    var WORDS : List{Int} .
    var INT : Int .
    var TIME : Header .

    rl [initTalker] :
        < ME : Talker | publisher : na, words : INT WORDS >
        createdPublisher(ME, ROS2, any:String, NEW)
    =>
        < ME : Talker | publisher : NEW, words : WORDS >
        publish(NEW,ME,[stamp: (sec: ros#int32(INT), nanosec: ros#uint32(0)), frame-id: ros#string("a")])
    .

    rl [talk] :
        < ME : Talker | publisher : O, words : INT WORDS >
        published(ME,O)
    =>
        < ME : Talker | publisher : O, words : WORDS >
        publish(O,ME,[stamp: (sec: ros#int32(INT), nanosec: ros#uint32(0)), frame-id: ros#string("a")]) 
    .

    rl [talk] :
        < ME : Talker | publisher : O, words : noInt >
        published(ME,O)
    =>
        < ME : Talker | publisher : O, words : noInt >
    .

    rl [initListener] :
        < ME : Listener | subscription : na >
        createdSubscription(ME, ROS2, NEW)
    =>
        < ME : Listener | subscription : NEW >
        recieve(NEW, ME)
    .    

    crl [initListener] :
        < ME : Listener | got : WORDS >
        recieved(ME, FROM, [TIME])
    =>
        if INT == 0 then
            < ME : Listener | got : WORDS >
        else
            < ME : Listener | got : WORDS INT >
            recieve(FROM, ME)
        fi
    if INT := int(sec(stamp(TIME))) 
    .    
endom

omod test3 is
    pr test1 * (
        op init to init1, 
        class Talker to STalker, 
        class Listener to SListener) .
    pr test2 * (
        op init to init2, 
        class Talker to TTalker, 
        class Listener to TListener) .
    op init : -> Configuration .
    eq init = init1 init2 .
endom