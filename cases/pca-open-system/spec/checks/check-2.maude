---- Property: The monitor object has identified a failure and has sent the corresponding message
---- The state space is infinite. With the abstrraction below the size of the state space is reduced, 
---- but still huge. 

---- Idea: In pca2, since the Pca object keeps track of the shots in the last 4-hours window, the log
---- could be abstracted away as well. However, the global clock would still be needed. 

---- Choose whether running the check on pca.maude or on pca2.maude by commenting out one or the other
sload ../pca.maude
---- sload ../pca2.maude

omod ABSTRACT-PCA is
  inc PCA .

  vars P O G A D T M : Oid .
  var  S S' : String .
  var  NzT : NzTime .
  var  Conf : Configuration .
  var  F : Float .
  var  Log : NeList{JsonValue} .
  var  Tm : RTMTime .

---- The Exit button is removed. Instead of abstracting it by removing the messages 
---- with this equation, the rule generating the messages could be commented out. 
---- Even though the result is the same, computationally it means a gain of ~40% of the time. 
  eq buttonPressed(O, G, "Exit") = none .
---- Time cannot pass if there are messages remaining to be consumed. Clicking the Shot
---- button at the same time doesn't add anything, since all subsequent messages will 
---- be ignored. With this equation we eliminate duplicates of shot buttonPressed
---- messages. We may still have inifinite sequences of buttonPressed + message ignored. 
  eq buttonPressed(O, G, "Shot") 
     buttonPressed(O, G, "Shot") 
   = buttonPressed(O, G, "Shot") .
---- As for Exit buttonPressed messages, instead of removing them, the rule genarating them
---- could be removed so that they are not generated. The computation time gained would be 
---- significant. 
  eq valueChanged(O, G, S, S') = none .
endom

---- With the above abstraction, the state space is still infinite. 

search [, 100] 
   { <PCA> create(Pca, oid(0), oid(1)), 0 } 
   =>* { checked(P, M, failure) Conf, Tm } .    
