load ros .

omod ROS2-Logical is
    ex ROS2-base .
    pr LIST{Oid} .
    pr LIST{Data} .

    op publisher : Int -> Oid .
    op subscription : Int -> Oid .
    op service : Int -> Oid .


    class ROS2Portal | publisherCount : Int, subscriptionCount : Int, serviceCount : Int .
    class Publisher | topic : String, dataType : ROS2-DataType, node : Oid, subscriptions : List{Oid}, queue : List{Data}, size : Int, subscriptionsLeft : List{Oid}, publishingData : Data .
    class Subscription | topic : String, dataType : ROS2-DataType, node : Oid, queue : List{Data}, size : Int .

    msg publishing : List{Oid} Data -> Msg .
    msg send : Oid Oid Data -> Msg .

    var NAME : String .
    var SIZE COUNT : Int .
    vars ME TO FROM SUB : Oid .
    var DT : ROS2-DataType .
    var ST : ROS2-ServiceType .
    vars DATA PUBLISHING : Data .
    var B : List{Data} .
    vars SUBS SUBSLEFT : List{Oid} .

    rl [initialize] :
        <ROS2>
    =>
        < ROS2 : ROS2Portal | publisherCount : 0, subscriptionCount : 0, serviceCount : 0 >
    .

    rl [createPublisher] :
        < ROS2 : ROS2Portal | publisherCount : COUNT >
        createPublisher(ROS2,FROM,DT,NAME,SIZE)
    =>   
        < ROS2 : ROS2Portal | publisherCount : s(COUNT) >
        < publisher(COUNT) : Publisher | topic : NAME, dataType : DT, node : FROM, subscriptions : nil, queue : nil, size : SIZE, subscriptionsLeft : nil, publishingData : null >
        createdPublisher(FROM,ROS2,publisher(COUNT))
    .

    rl [publish] :
        < ROS2 : ROS2Portal | >
        < ME : Publisher | dataType : DT, node : FROM, queue : B, size : SIZE >
        publish(ME,FROM,DATA)
    =>   
        < ROS2 : ROS2Portal | >
        if typeof(DATA) == DT then
            if size(B) < SIZE then
                < ME : Publisher | dataType : DT, node : FROM, queue : B DATA >
            else
                < ME : Publisher | dataType : DT, node : FROM, queue : tail(B) DATA >
            fi
            published(FROM,ME)
        else
            < ME : Publisher | dataType : DT, node : FROM, queue : B >
            ros2Error(publish(ME,FROM,DATA))
        fi
    .

    rl [publish] :
        < ROS2 : ROS2Portal | >
        < ME : Publisher | queue : DATA B, subscriptions : SUBS, subscriptionsLeft : nil >
    =>   
        < ROS2 : ROS2Portal | >
        < ME : Publisher | queue : B, subscriptions : SUBS, subscriptionsLeft : SUBS, publishingData : DATA >
    .

    rl [publish] :
        < ROS2 : ROS2Portal | >
        < ME : Publisher | subscriptionsLeft : SUB SUBS, publishingData : DATA >
    =>
        < ROS2 : ROS2Portal | >
        < ME : Publisher | subscriptionsLeft : SUBS, publishingData : DATA >
        send(SUB,ME,DATA)
    .

    rl [createSubscription] :
        < ROS2 : ROS2Portal | subscriptionCount : COUNT >
        < ME : Publisher | topic : NAME, dataType : DT, subscriptions : SUBS >
        createSubscription(ROS2,FROM,DT,NAME,SIZE)
    =>   
        < ROS2 : ROS2Portal | subscriptionCount : s(COUNT) >
        < ME : Publisher | subscriptions : subscription(COUNT) SUBS >
        < subscription(COUNT) : Subscription | topic : NAME, dataType : DT, node : FROM, queue : nil, size : SIZE >
        createdSubscription(FROM,ROS2,subscription(COUNT))
    .
    
    rl [send] :
        < ROS2 : ROS2Portal | >
        < ME : Subscription | queue : B, size : SIZE >
        send(ME,FROM,DATA)
    =>
        < ROS2 : ROS2Portal | >
        if size(B) < SIZE then
            < ME : Subscription | queue : B DATA >
        else
            < ME : Subscription | queue : tail(B) DATA >
        fi
    .

    rl [recieve] :
        < ROS2 : ROS2Portal | >
        < ME : Subscription | node : FROM, queue : DATA B >
        recieve(ME,FROM)
    =>
        < ROS2 : ROS2Portal | >
        < ME : Subscription | node : FROM, queue : B >
        recieved(FROM,ME,DATA)
    .
endom


omod ROS2 is
    ex ROS2-Logical .
endom